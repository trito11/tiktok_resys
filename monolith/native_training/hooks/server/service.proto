// Copyright 2022 ByteDance and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

message StopTrainingRequest {
}

message StopTrainingResponse {
}

message ResumeTrainingRequest {
}

message ResumeTrainingResponse {
}

message GetBlockStatusRequest {
}

message GetBlockStatusResponse {
  repeated int32 blocked_indices = 1;
  repeated int32 unblocked_indices = 2;
}

message SaveCheckpointRequest {
}

message SaveCheckpointResponse {
}

message GetTrainingStatusRequest {
}

message GetTrainingStatusResponse {
  int64 global_step = 1;
}

service Controller {
  // Requests stopping the training. All workers will be stopped gradually.
  rpc StopTraining(StopTrainingRequest) returns (StopTrainingResponse) {
  }
  // Requests resuming the training. All workers will be resumed gradually.
  rpc ResumeTraining(ResumeTrainingRequest) returns (ResumeTrainingResponse) {
  }
  // Checks the current block/unblock status.
  rpc GetBlockStatus(GetBlockStatusRequest) returns (GetBlockStatusResponse) {
  }
  // Triggers a on-demand checkpoint save. Can be called in any cases. For
  // example,
  // can be called immediately after StopTraining is returned.
  // When rpc returned successfully, a checkpoint is saved successfully.
  rpc SaveCheckpoint(SaveCheckpointRequest) returns (SaveCheckpointResponse) {
  }
  rpc GetTrainingStatus(GetTrainingStatusRequest)
      returns (GetTrainingStatusResponse) {
  }
}